# coding: utf-8

"""
    Monitoring Hub API

    API to access data from the monitoring hub. <br>Each monitoring element available is described by the path *source/partition/task/entity*. <br> - **source**: DIM, savesets, WinCC, prometheus, simulation, ... - **partition**: LHCb, TDET, VELO, requestID, ... - **task**: the name of the task publishing the data, for simulation event type number - **entity**: the item to monitoring, such as histogram, trend, ... 

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from MonitoringHub.models.api_hub_get_data200_response import ApiHubGetData200Response
from MonitoringHub.models.api_hub_get_large_data200_response import ApiHubGetLargeData200Response
from MonitoringHub.models.root import ROOT

from MonitoringHub.api_client import ApiClient, RequestSerialized
from MonitoringHub.api_response import ApiResponse
from MonitoringHub.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_hub_create_allen_run_saveset(
        self,
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_create_allen_run_saveset

        Create run saveset for Allen 

        :param run: run number
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_allen_run_saveset_serialize(
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_create_allen_run_saveset_with_http_info(
        self,
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_create_allen_run_saveset

        Create run saveset for Allen 

        :param run: run number
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_allen_run_saveset_serialize(
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_create_allen_run_saveset_without_preload_content(
        self,
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_create_allen_run_saveset

        Create run saveset for Allen 

        :param run: run number
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_allen_run_saveset_serialize(
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_create_allen_run_saveset_serialize(
        self,
        run,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if run is not None:
            
            _query_params.append(('run', run))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/createallenrunsaveset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_create_run_saveset(
        self,
        partition: Annotated[StrictStr, Field(description="partition where the run was taken")],
        runnumber: Annotated[StrictInt, Field(description="run number to copy")],
        path: Annotated[StrictStr, Field(description="path of the savesets")],
        var_date: Annotated[date, Field(description="day of the run if available")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_create_run_saveset

        Copy the run saveset to the ByRun folder. 

        :param partition: partition where the run was taken (required)
        :type partition: str
        :param runnumber: run number to copy (required)
        :type runnumber: int
        :param path: path of the savesets (required)
        :type path: str
        :param var_date: day of the run if available (required)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_saveset_serialize(
            partition=partition,
            runnumber=runnumber,
            path=path,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_create_run_saveset_with_http_info(
        self,
        partition: Annotated[StrictStr, Field(description="partition where the run was taken")],
        runnumber: Annotated[StrictInt, Field(description="run number to copy")],
        path: Annotated[StrictStr, Field(description="path of the savesets")],
        var_date: Annotated[date, Field(description="day of the run if available")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_create_run_saveset

        Copy the run saveset to the ByRun folder. 

        :param partition: partition where the run was taken (required)
        :type partition: str
        :param runnumber: run number to copy (required)
        :type runnumber: int
        :param path: path of the savesets (required)
        :type path: str
        :param var_date: day of the run if available (required)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_saveset_serialize(
            partition=partition,
            runnumber=runnumber,
            path=path,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_create_run_saveset_without_preload_content(
        self,
        partition: Annotated[StrictStr, Field(description="partition where the run was taken")],
        runnumber: Annotated[StrictInt, Field(description="run number to copy")],
        path: Annotated[StrictStr, Field(description="path of the savesets")],
        var_date: Annotated[date, Field(description="day of the run if available")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_create_run_saveset

        Copy the run saveset to the ByRun folder. 

        :param partition: partition where the run was taken (required)
        :type partition: str
        :param runnumber: run number to copy (required)
        :type runnumber: int
        :param path: path of the savesets (required)
        :type path: str
        :param var_date: day of the run if available (required)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_saveset_serialize(
            partition=partition,
            runnumber=runnumber,
            path=path,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_create_run_saveset_serialize(
        self,
        partition,
        runnumber,
        path,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partition is not None:
            _path_params['partition'] = partition
        if runnumber is not None:
            _path_params['runnumber'] = runnumber
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/createrunsaveset/{partition}/{runnumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_create_run_savesets(
        self,
        start_date: Annotated[date, Field(description="first day to check")],
        end_date: Annotated[date, Field(description="last day to check")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_create_run_savesets

        Copy the run savesets to the ByRun folder between different dates. 

        :param start_date: first day to check (required)
        :type start_date: date
        :param end_date: last day to check (required)
        :type end_date: date
        :param path: path for reference files (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_savesets_serialize(
            start_date=start_date,
            end_date=end_date,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_create_run_savesets_with_http_info(
        self,
        start_date: Annotated[date, Field(description="first day to check")],
        end_date: Annotated[date, Field(description="last day to check")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_create_run_savesets

        Copy the run savesets to the ByRun folder between different dates. 

        :param start_date: first day to check (required)
        :type start_date: date
        :param end_date: last day to check (required)
        :type end_date: date
        :param path: path for reference files (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_savesets_serialize(
            start_date=start_date,
            end_date=end_date,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_create_run_savesets_without_preload_content(
        self,
        start_date: Annotated[date, Field(description="first day to check")],
        end_date: Annotated[date, Field(description="last day to check")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_create_run_savesets

        Copy the run savesets to the ByRun folder between different dates. 

        :param start_date: first day to check (required)
        :type start_date: date
        :param end_date: last day to check (required)
        :type end_date: date
        :param path: path for reference files (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_run_savesets_serialize(
            start_date=start_date,
            end_date=end_date,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_create_run_savesets_serialize(
        self,
        start_date,
        end_date,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/createrunsavesets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_create_saveset(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_create_saveset

        Create the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_saveset_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_create_saveset_with_http_info(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_create_saveset

        Create the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_saveset_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_create_saveset_without_preload_content(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_create_saveset

        Create the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_create_saveset_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_create_saveset_serialize(
        self,
        partition,
        task,
        path,
        run,
        fill,
        runlist,
        time_start,
        time_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'runlist': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        if fill is not None:
            
            _query_params.append(('fill', fill))
            
        if runlist is not None:
            
            _query_params.append(('runlist', runlist))
            
        if time_start is not None:
            if isinstance(time_start, datetime):
                _query_params.append(
                    (
                        'time_start',
                        time_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            if isinstance(time_end, datetime):
                _query_params.append(
                    (
                        'time_end',
                        time_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_end', time_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/createsaveset/{task}/{partition}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_data(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        sample_size: Annotated[Optional[Annotated[int, Field(le=5000, strict=True, ge=100)]], Field(description="for wincc archive source, specifiy the size of the returned data.")] = None,
        last_values_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="for wincc archive source, give the number of values to take from the end of the time window")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiHubGetData200Response:
        """api_hub_get_data

        Returns the data corresponding to an entity (defined with source, partition and task). For the wincc archive data source, set the partition to LHCb. 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param sample_size: for wincc archive source, specifiy the size of the returned data.
        :type sample_size: int
        :param last_values_number: for wincc archive source, give the number of values to take from the end of the time window
        :type last_values_number: int
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            sample_size=sample_size,
            last_values_number=last_values_number,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_data_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        sample_size: Annotated[Optional[Annotated[int, Field(le=5000, strict=True, ge=100)]], Field(description="for wincc archive source, specifiy the size of the returned data.")] = None,
        last_values_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="for wincc archive source, give the number of values to take from the end of the time window")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiHubGetData200Response]:
        """api_hub_get_data

        Returns the data corresponding to an entity (defined with source, partition and task). For the wincc archive data source, set the partition to LHCb. 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param sample_size: for wincc archive source, specifiy the size of the returned data.
        :type sample_size: int
        :param last_values_number: for wincc archive source, give the number of values to take from the end of the time window
        :type last_values_number: int
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            sample_size=sample_size,
            last_values_number=last_values_number,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_data_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        sample_size: Annotated[Optional[Annotated[int, Field(le=5000, strict=True, ge=100)]], Field(description="for wincc archive source, specifiy the size of the returned data.")] = None,
        last_values_number: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="for wincc archive source, give the number of values to take from the end of the time window")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_data

        Returns the data corresponding to an entity (defined with source, partition and task). For the wincc archive data source, set the partition to LHCb. 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param sample_size: for wincc archive source, specifiy the size of the returned data.
        :type sample_size: int
        :param last_values_number: for wincc archive source, give the number of values to take from the end of the time window
        :type last_values_number: int
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            sample_size=sample_size,
            last_values_number=last_values_number,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_data_serialize(
        self,
        source,
        partition,
        task,
        entity,
        dim_dns_node,
        server,
        path,
        run,
        run_max,
        fill,
        fill_max,
        runlist,
        time_start,
        time_end,
        sample_size,
        last_values_number,
        analysis_type,
        analysis_inputs,
        analysis_parameters,
        hist_titles,
        hist_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'runlist': 'multi',
            'analysis_inputs': 'multi',
            'analysis_parameters': 'multi',
            'hist_titles': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        # process the query parameters
        if entity is not None:
            
            _query_params.append(('entity', entity))
            
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        if run_max is not None:
            
            _query_params.append(('run_max', run_max))
            
        if fill is not None:
            
            _query_params.append(('fill', fill))
            
        if fill_max is not None:
            
            _query_params.append(('fill_max', fill_max))
            
        if runlist is not None:
            
            _query_params.append(('runlist', runlist))
            
        if time_start is not None:
            if isinstance(time_start, datetime):
                _query_params.append(
                    (
                        'time_start',
                        time_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            if isinstance(time_end, datetime):
                _query_params.append(
                    (
                        'time_end',
                        time_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_end', time_end))
            
        if sample_size is not None:
            
            _query_params.append(('sample_size', sample_size))
            
        if last_values_number is not None:
            
            _query_params.append(('last_values_number', last_values_number))
            
        if analysis_type is not None:
            
            _query_params.append(('analysis_type', analysis_type))
            
        if analysis_inputs is not None:
            
            _query_params.append(('analysis_inputs', analysis_inputs))
            
        if analysis_parameters is not None:
            
            _query_params.append(('analysis_parameters', analysis_parameters))
            
        if hist_titles is not None:
            
            _query_params.append(('hist_titles', hist_titles))
            
        if hist_index is not None:
            
            _query_params.append(('hist_index', hist_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/{task}/{partition}/{source}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_entities(
        self,
        source: Annotated[StrictStr, Field(description="source to get the entities for")],
        partition: Annotated[StrictStr, Field(description="partition to get the entities for")],
        task: Annotated[StrictStr, Field(description="task to get the entities for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """api_hub_get_entities

        Returns a list of all entities for a given source, partition and task<br> *Not implemented for the wincc archive data source (for performance reasons)* 

        :param source: source to get the entities for (required)
        :type source: str
        :param partition: partition to get the entities for (required)
        :type partition: str
        :param task: task to get the entities for (required)
        :type task: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_entities_serialize(
            source=source,
            partition=partition,
            task=task,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_entities_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the entities for")],
        partition: Annotated[StrictStr, Field(description="partition to get the entities for")],
        task: Annotated[StrictStr, Field(description="task to get the entities for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """api_hub_get_entities

        Returns a list of all entities for a given source, partition and task<br> *Not implemented for the wincc archive data source (for performance reasons)* 

        :param source: source to get the entities for (required)
        :type source: str
        :param partition: partition to get the entities for (required)
        :type partition: str
        :param task: task to get the entities for (required)
        :type task: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_entities_serialize(
            source=source,
            partition=partition,
            task=task,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_entities_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the entities for")],
        partition: Annotated[StrictStr, Field(description="partition to get the entities for")],
        task: Annotated[StrictStr, Field(description="task to get the entities for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_entities

        Returns a list of all entities for a given source, partition and task<br> *Not implemented for the wincc archive data source (for performance reasons)* 

        :param source: source to get the entities for (required)
        :type source: str
        :param partition: partition to get the entities for (required)
        :type partition: str
        :param task: task to get the entities for (required)
        :type task: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_entities_serialize(
            source=source,
            partition=partition,
            task=task,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_entities_serialize(
        self,
        source,
        partition,
        task,
        dim_dns_node,
        server,
        path,
        run,
        time_start,
        time_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        # process the query parameters
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        if time_start is not None:
            if isinstance(time_start, datetime):
                _query_params.append(
                    (
                        'time_start',
                        time_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            if isinstance(time_end, datetime):
                _query_params.append(
                    (
                        'time_end',
                        time_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_end', time_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/entities/{task}/{partition}/{source}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_large_data(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        analysis_type: Annotated[StrictStr, Field(description="type of the automatic analysis or operation")],
        body: Annotated[Dict[str, Any], Field(description="List of analysis inputs")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiHubGetLargeData200Response:
        """api_hub_get_large_data

        Returns the data corresponding to an entity for large number of inputs for the  automatic analysis 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param analysis_type: type of the automatic analysis or operation (required)
        :type analysis_type: str
        :param body: List of analysis inputs (required)
        :type body: object
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_large_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            analysis_type=analysis_type,
            body=body,
            dim_dns_node=dim_dns_node,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetLargeData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_large_data_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        analysis_type: Annotated[StrictStr, Field(description="type of the automatic analysis or operation")],
        body: Annotated[Dict[str, Any], Field(description="List of analysis inputs")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiHubGetLargeData200Response]:
        """api_hub_get_large_data

        Returns the data corresponding to an entity for large number of inputs for the  automatic analysis 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param analysis_type: type of the automatic analysis or operation (required)
        :type analysis_type: str
        :param body: List of analysis inputs (required)
        :type body: object
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_large_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            analysis_type=analysis_type,
            body=body,
            dim_dns_node=dim_dns_node,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetLargeData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_large_data_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the data for")],
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        entity: Annotated[StrictStr, Field(description="entity to get the data for")],
        analysis_type: Annotated[StrictStr, Field(description="type of the automatic analysis or operation")],
        body: Annotated[Dict[str, Any], Field(description="List of analysis inputs")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        run_max: Annotated[Optional[StrictInt], Field(description="max run number for trends")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        fill_max: Annotated[Optional[StrictInt], Field(description="max fill number for trends")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        hist_titles: Annotated[Optional[List[StrictStr]], Field(description="titles of histograms")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_large_data

        Returns the data corresponding to an entity for large number of inputs for the  automatic analysis 

        :param source: source to get the data for (required)
        :type source: str
        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param entity: entity to get the data for (required)
        :type entity: str
        :param analysis_type: type of the automatic analysis or operation (required)
        :type analysis_type: str
        :param body: List of analysis inputs (required)
        :type body: object
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param run_max: max run number for trends
        :type run_max: int
        :param fill: fill number for savesets
        :type fill: int
        :param fill_max: max fill number for trends
        :type fill_max: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param hist_titles: titles of histograms
        :type hist_titles: List[str]
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_large_data_serialize(
            source=source,
            partition=partition,
            task=task,
            entity=entity,
            analysis_type=analysis_type,
            body=body,
            dim_dns_node=dim_dns_node,
            path=path,
            run=run,
            run_max=run_max,
            fill=fill,
            fill_max=fill_max,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            analysis_parameters=analysis_parameters,
            hist_titles=hist_titles,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiHubGetLargeData200Response",
            '206': "ApiHubGetData200Response",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_large_data_serialize(
        self,
        source,
        partition,
        task,
        entity,
        analysis_type,
        body,
        dim_dns_node,
        path,
        run,
        run_max,
        fill,
        fill_max,
        runlist,
        time_start,
        time_end,
        analysis_parameters,
        hist_titles,
        hist_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'runlist': 'multi',
            'analysis_parameters': 'multi',
            'hist_titles': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        # process the query parameters
        if entity is not None:
            
            _query_params.append(('entity', entity))
            
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        if run_max is not None:
            
            _query_params.append(('run_max', run_max))
            
        if fill is not None:
            
            _query_params.append(('fill', fill))
            
        if fill_max is not None:
            
            _query_params.append(('fill_max', fill_max))
            
        if runlist is not None:
            
            _query_params.append(('runlist', runlist))
            
        if time_start is not None:
            if isinstance(time_start, datetime):
                _query_params.append(
                    (
                        'time_start',
                        time_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            if isinstance(time_end, datetime):
                _query_params.append(
                    (
                        'time_end',
                        time_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_end', time_end))
            
        if analysis_type is not None:
            
            _query_params.append(('analysis_type', analysis_type))
            
        if analysis_parameters is not None:
            
            _query_params.append(('analysis_parameters', analysis_parameters))
            
        if hist_titles is not None:
            
            _query_params.append(('hist_titles', hist_titles))
            
        if hist_index is not None:
            
            _query_params.append(('hist_index', hist_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/largedata/{task}/{partition}/{source}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_partitions(
        self,
        source: Annotated[StrictStr, Field(description="source to get the partitions for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node for dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """api_hub_get_partitions

        Returns a list of all partitions for a given source. For the WinCC archive source, returns LHCb. 

        :param source: source to get the partitions for (required)
        :type source: str
        :param dim_dns_node: dim_dns_node for dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets source
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_partitions_serialize(
            source=source,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_partitions_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the partitions for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node for dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """api_hub_get_partitions

        Returns a list of all partitions for a given source. For the WinCC archive source, returns LHCb. 

        :param source: source to get the partitions for (required)
        :type source: str
        :param dim_dns_node: dim_dns_node for dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets source
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_partitions_serialize(
            source=source,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_partitions_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the partitions for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node for dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_partitions

        Returns a list of all partitions for a given source. For the WinCC archive source, returns LHCb. 

        :param source: source to get the partitions for (required)
        :type source: str
        :param dim_dns_node: dim_dns_node for dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets source
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_partitions_serialize(
            source=source,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_partitions_serialize(
        self,
        source,
        dim_dns_node,
        server,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        # process the query parameters
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/partitions/{source}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_reference(
        self,
        source: Annotated[StrictStr, Field(description="source to get the reference for")],
        partition: Annotated[StrictStr, Field(description="partition to get the reference for")],
        task: Annotated[StrictStr, Field(description="task to get the reference for")],
        runnumber: Annotated[StrictInt, Field(description="run number")],
        entity: Annotated[StrictStr, Field(description="entity to get the reference for")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        extrapath: Annotated[Optional[StrictStr], Field(description="extra path for reference files to add at the end of the root file name")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ROOT:
        """api_hub_get_reference

        Returns the reference corresponding to an entity (defined with source, partition and task). 

        :param source: source to get the reference for (required)
        :type source: str
        :param partition: partition to get the reference for (required)
        :type partition: str
        :param task: task to get the reference for (required)
        :type task: str
        :param runnumber: run number (required)
        :type runnumber: int
        :param entity: entity to get the reference for (required)
        :type entity: str
        :param path: path for reference files (required)
        :type path: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param extrapath: extra path for reference files to add at the end of the root file name
        :type extrapath: str
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_reference_serialize(
            source=source,
            partition=partition,
            task=task,
            runnumber=runnumber,
            entity=entity,
            path=path,
            dim_dns_node=dim_dns_node,
            server=server,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            extrapath=extrapath,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ROOT",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_reference_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the reference for")],
        partition: Annotated[StrictStr, Field(description="partition to get the reference for")],
        task: Annotated[StrictStr, Field(description="task to get the reference for")],
        runnumber: Annotated[StrictInt, Field(description="run number")],
        entity: Annotated[StrictStr, Field(description="entity to get the reference for")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        extrapath: Annotated[Optional[StrictStr], Field(description="extra path for reference files to add at the end of the root file name")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ROOT]:
        """api_hub_get_reference

        Returns the reference corresponding to an entity (defined with source, partition and task). 

        :param source: source to get the reference for (required)
        :type source: str
        :param partition: partition to get the reference for (required)
        :type partition: str
        :param task: task to get the reference for (required)
        :type task: str
        :param runnumber: run number (required)
        :type runnumber: int
        :param entity: entity to get the reference for (required)
        :type entity: str
        :param path: path for reference files (required)
        :type path: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param extrapath: extra path for reference files to add at the end of the root file name
        :type extrapath: str
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_reference_serialize(
            source=source,
            partition=partition,
            task=task,
            runnumber=runnumber,
            entity=entity,
            path=path,
            dim_dns_node=dim_dns_node,
            server=server,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            extrapath=extrapath,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ROOT",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_reference_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the reference for")],
        partition: Annotated[StrictStr, Field(description="partition to get the reference for")],
        task: Annotated[StrictStr, Field(description="task to get the reference for")],
        runnumber: Annotated[StrictInt, Field(description="run number")],
        entity: Annotated[StrictStr, Field(description="entity to get the reference for")],
        path: Annotated[StrictStr, Field(description="path for reference files")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        analysis_type: Annotated[Optional[StrictStr], Field(description="type of the automatic analysis or operation")] = None,
        analysis_inputs: Annotated[Optional[List[StrictStr]], Field(description="list of histograms to use in automatic analysis")] = None,
        analysis_parameters: Annotated[Optional[List[StrictStr]], Field(description="list of analysis_parameters")] = None,
        extrapath: Annotated[Optional[StrictStr], Field(description="extra path for reference files to add at the end of the root file name")] = None,
        hist_index: Annotated[Optional[StrictInt], Field(description="index to select an histogram at the operation level")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_reference

        Returns the reference corresponding to an entity (defined with source, partition and task). 

        :param source: source to get the reference for (required)
        :type source: str
        :param partition: partition to get the reference for (required)
        :type partition: str
        :param task: task to get the reference for (required)
        :type task: str
        :param runnumber: run number (required)
        :type runnumber: int
        :param entity: entity to get the reference for (required)
        :type entity: str
        :param path: path for reference files (required)
        :type path: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param analysis_type: type of the automatic analysis or operation
        :type analysis_type: str
        :param analysis_inputs: list of histograms to use in automatic analysis
        :type analysis_inputs: List[str]
        :param analysis_parameters: list of analysis_parameters
        :type analysis_parameters: List[str]
        :param extrapath: extra path for reference files to add at the end of the root file name
        :type extrapath: str
        :param hist_index: index to select an histogram at the operation level
        :type hist_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_reference_serialize(
            source=source,
            partition=partition,
            task=task,
            runnumber=runnumber,
            entity=entity,
            path=path,
            dim_dns_node=dim_dns_node,
            server=server,
            analysis_type=analysis_type,
            analysis_inputs=analysis_inputs,
            analysis_parameters=analysis_parameters,
            extrapath=extrapath,
            hist_index=hist_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ROOT",
            '400': "Error",
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_reference_serialize(
        self,
        source,
        partition,
        task,
        runnumber,
        entity,
        path,
        dim_dns_node,
        server,
        analysis_type,
        analysis_inputs,
        analysis_parameters,
        extrapath,
        hist_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'analysis_inputs': 'multi',
            'analysis_parameters': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        if runnumber is not None:
            _path_params['runnumber'] = runnumber
        # process the query parameters
        if entity is not None:
            
            _query_params.append(('entity', entity))
            
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if analysis_type is not None:
            
            _query_params.append(('analysis_type', analysis_type))
            
        if analysis_inputs is not None:
            
            _query_params.append(('analysis_inputs', analysis_inputs))
            
        if analysis_parameters is not None:
            
            _query_params.append(('analysis_parameters', analysis_parameters))
            
        if extrapath is not None:
            
            _query_params.append(('extrapath', extrapath))
            
        if hist_index is not None:
            
            _query_params.append(('hist_index', hist_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reference/{task}/{partition}/{source}/{runnumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_sources(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """api_hub_get_sources

        Returns a list of all sources.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_sources_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_sources_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """api_hub_get_sources

        Returns a list of all sources.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_sources_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_sources_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_sources

        Returns a list of all sources.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_sources_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_sources_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sources',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_get_tasks(
        self,
        source: Annotated[StrictStr, Field(description="source to get the tasks for")],
        partition: Annotated[StrictStr, Field(description="partition to get the tasks for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """api_hub_get_tasks

        Returns a list of all tasks for a given partition. For the wincc archive data source, this corresponds to the list of connected projects. 

        :param source: source to get the tasks for (required)
        :type source: str
        :param partition: partition to get the tasks for (required)
        :type partition: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_tasks_serialize(
            source=source,
            partition=partition,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '403': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_get_tasks_with_http_info(
        self,
        source: Annotated[StrictStr, Field(description="source to get the tasks for")],
        partition: Annotated[StrictStr, Field(description="partition to get the tasks for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """api_hub_get_tasks

        Returns a list of all tasks for a given partition. For the wincc archive data source, this corresponds to the list of connected projects. 

        :param source: source to get the tasks for (required)
        :type source: str
        :param partition: partition to get the tasks for (required)
        :type partition: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_tasks_serialize(
            source=source,
            partition=partition,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '403': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_get_tasks_without_preload_content(
        self,
        source: Annotated[StrictStr, Field(description="source to get the tasks for")],
        partition: Annotated[StrictStr, Field(description="partition to get the tasks for")],
        dim_dns_node: Annotated[Optional[StrictStr], Field(description="dim_dns_node in case of dim source")] = None,
        server: Annotated[Optional[StrictStr], Field(description="name of the server hosting the WinCC API, should start with http or https")] = None,
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_get_tasks

        Returns a list of all tasks for a given partition. For the wincc archive data source, this corresponds to the list of connected projects. 

        :param source: source to get the tasks for (required)
        :type source: str
        :param partition: partition to get the tasks for (required)
        :type partition: str
        :param dim_dns_node: dim_dns_node in case of dim source
        :type dim_dns_node: str
        :param server: name of the server hosting the WinCC API, should start with http or https
        :type server: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_get_tasks_serialize(
            source=source,
            partition=partition,
            dim_dns_node=dim_dns_node,
            server=server,
            path=path,
            run=run,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': "Error",
            '403': "Error",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_get_tasks_serialize(
        self,
        source,
        partition,
        dim_dns_node,
        server,
        path,
        run,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source is not None:
            _path_params['source'] = source
        if partition is not None:
            _path_params['partition'] = partition
        # process the query parameters
        if dim_dns_node is not None:
            
            _query_params.append(('dim_dns_node', dim_dns_node))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tasks/{partition}/{source}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_prepare_file(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_prepare_file

        Prepare the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_prepare_file_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_prepare_file_with_http_info(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_prepare_file

        Prepare the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_prepare_file_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_prepare_file_without_preload_content(
        self,
        partition: Annotated[StrictStr, Field(description="partition to get the data for")],
        task: Annotated[StrictStr, Field(description="task to get the data for")],
        path: Annotated[Optional[StrictStr], Field(description="path for savesets")] = None,
        run: Annotated[Optional[StrictInt], Field(description="run number for savesets")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number for savesets")] = None,
        runlist: Annotated[Optional[List[StrictInt]], Field(description="list of run numbers")] = None,
        time_start: Annotated[Optional[datetime], Field(description="begining of the time interval of the data, default is now")] = None,
        time_end: Annotated[Optional[datetime], Field(description="end of the time interval of the data, default is now")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_prepare_file

        Prepare the file for history mode. 

        :param partition: partition to get the data for (required)
        :type partition: str
        :param task: task to get the data for (required)
        :type task: str
        :param path: path for savesets
        :type path: str
        :param run: run number for savesets
        :type run: int
        :param fill: fill number for savesets
        :type fill: int
        :param runlist: list of run numbers
        :type runlist: List[int]
        :param time_start: begining of the time interval of the data, default is now
        :type time_start: datetime
        :param time_end: end of the time interval of the data, default is now
        :type time_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_prepare_file_serialize(
            partition=partition,
            task=task,
            path=path,
            run=run,
            fill=fill,
            runlist=runlist,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
            '408': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_prepare_file_serialize(
        self,
        partition,
        task,
        path,
        run,
        fill,
        runlist,
        time_start,
        time_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'runlist': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partition is not None:
            _path_params['partition'] = partition
        if task is not None:
            _path_params['task'] = task
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if run is not None:
            
            _query_params.append(('run', run))
            
        if fill is not None:
            
            _query_params.append(('fill', fill))
            
        if runlist is not None:
            
            _query_params.append(('runlist', runlist))
            
        if time_start is not None:
            if isinstance(time_start, datetime):
                _query_params.append(
                    (
                        'time_start',
                        time_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            if isinstance(time_end, datetime):
                _query_params.append(
                    (
                        'time_end',
                        time_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('time_end', time_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/preparefile/{task}/{partition}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_hub_store_in_dqdb(
        self,
        histograms: Annotated[List[StrictStr], Field(description="list of histogram names")],
        algorithm: Annotated[StrictStr, Field(description="name of algorithm")],
        body: Annotated[Dict[str, Any], Field(description="Data to write")],
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_hub_store_in_dqdb

        Write data in dqdb trend database 

        :param histograms: list of histogram names (required)
        :type histograms: List[str]
        :param algorithm: name of algorithm (required)
        :type algorithm: str
        :param body: Data to write (required)
        :type body: object
        :param run: run number
        :type run: int
        :param fill: fill number
        :type fill: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_store_in_dqdb_serialize(
            histograms=histograms,
            algorithm=algorithm,
            body=body,
            run=run,
            fill=fill,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_hub_store_in_dqdb_with_http_info(
        self,
        histograms: Annotated[List[StrictStr], Field(description="list of histogram names")],
        algorithm: Annotated[StrictStr, Field(description="name of algorithm")],
        body: Annotated[Dict[str, Any], Field(description="Data to write")],
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_hub_store_in_dqdb

        Write data in dqdb trend database 

        :param histograms: list of histogram names (required)
        :type histograms: List[str]
        :param algorithm: name of algorithm (required)
        :type algorithm: str
        :param body: Data to write (required)
        :type body: object
        :param run: run number
        :type run: int
        :param fill: fill number
        :type fill: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_store_in_dqdb_serialize(
            histograms=histograms,
            algorithm=algorithm,
            body=body,
            run=run,
            fill=fill,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_hub_store_in_dqdb_without_preload_content(
        self,
        histograms: Annotated[List[StrictStr], Field(description="list of histogram names")],
        algorithm: Annotated[StrictStr, Field(description="name of algorithm")],
        body: Annotated[Dict[str, Any], Field(description="Data to write")],
        run: Annotated[Optional[StrictInt], Field(description="run number")] = None,
        fill: Annotated[Optional[StrictInt], Field(description="fill number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_hub_store_in_dqdb

        Write data in dqdb trend database 

        :param histograms: list of histogram names (required)
        :type histograms: List[str]
        :param algorithm: name of algorithm (required)
        :type algorithm: str
        :param body: Data to write (required)
        :type body: object
        :param run: run number
        :type run: int
        :param fill: fill number
        :type fill: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_hub_store_in_dqdb_serialize(
            histograms=histograms,
            algorithm=algorithm,
            body=body,
            run=run,
            fill=fill,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_hub_store_in_dqdb_serialize(
        self,
        histograms,
        algorithm,
        body,
        run,
        fill,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'histograms': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if run is not None:
            
            _query_params.append(('run', run))
            
        if fill is not None:
            
            _query_params.append(('fill', fill))
            
        if histograms is not None:
            
            _query_params.append(('histograms', histograms))
            
        if algorithm is not None:
            
            _query_params.append(('algorithm', algorithm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/storeindqdb',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


