"""
Configuration for the WebMonitor server.
"""
import os

# Application name, used in page titles etc.
APP_NAME = 'Web Monitor'

SSO_LOGIN_URL = "/login"

# Run the server in debug mode?
DEBUG = True

# Where static assets are stored (images, stylesheets, and JavaScripts)
ASSETS_DIRECTORY = '{0}/static'.format(
                   os.path.dirname(os.path.abspath(__file__))
)

# Where ROOT files are stored
FILES_DIRECTORY = '{0}/files'.format(ASSETS_DIRECTORY)


MONET_DEVELOPER = "test"
MONET_DEVELOPMENT = True
TESTING = True
RENDERER_SERVER =  "http://localhost:8002/"

SHIB_LOGOUT = "https://login.cern.ch/adfs/ls/?wa=wsignout1.0"

# Application name, used in page titles etc.
APP_NAME = 'LHCb DQM'

# Description, shown in the <meta> tag
APP_DESCRIPTION = 'An example app based on the WebMonitor.'

# List of emails to send ERROR messages to
ADMINS = ['flavio.archilli@cern.ch','denis.derkach@cern.ch', 'a.baranov@cern.ch']

# Mappings of parent paths to their default children
# The key represents the visited path, the value is the page that's served
# For the dict below, a visited path of `examples` will show the
# `examples/table` page, as an example
DEFAULT_CHILDREN = {
                   '/' : 'offline_bp/',
#    '': 'home',
}

# Format string to generate LFN used in bookkeeping
LFN_FORMAT_STRING = 'root://castorlhcb.cern.ch//castor/cern.ch/grid/lhcb/LHCb/%s/HIST/%s/BrunelDaVinci_%s_%s_Hist.root?svcClass=lhcbdisk'

# Base path to generate path to reference in afs used in bookkeeping
REFERENCE_BASE_PATH = "/afs/cern.ch/lhcb/group/dataquality/ROOT/REFERENCE/FULL/"

# Constants from the former presenter, regarding the normalisation of references
s_Area = "AREA";
s_Entries = "ENTR";
s_NoReference = "NOREF";
s_NoNormalization = "NONE";

# Contains the path to the histoDB, used in DBdeclaration.py
HISTODB_PATH = ""


HISTODB_ENGINE_PATH = "oracle://hist_dev:blahblahblah@intdb11"
DQDB_ENGINE_PATH = "oracle://DQDBLOGIN:DQDBPWD@DQDBTNS"


from presenter import histodb
#HISTODB = histodb.PhonyHistoDBconnection()
HISTODB_DIR = 'histoyml'
HISTODB_CACHED_TIME = 0
HISTODB = histodb.HistoFiles(HISTODB_DIR, HISTODB_CACHED_TIME)

import dqdb # https://gitlab.cern.ch/lhcb-dq/dqdb
DQDB = dqdb.DQ_DB("postgresql:///dq_dev5")


HOST = "0.0.0.0"


ELOG_CONFIG = {
              "host": "lblogbook.cern.ch",
              "port": 8080,
              "username": "",
              "password": "",
}

from sh import elog, bash
ELOG_CMD = elog.bake(
           "-h", ELOG_CONFIG['host'],
           "-p", ELOG_CONFIG['port'],
           "-u", ELOG_CONFIG['username'], ELOG_CONFIG['password']
)


EOS_COPY_CMD = bash.bake("/home/sashab1/monet/scripts/copy_from_eos")
EOS_LOCAL_PATH = "/tmp/sashab1"

from onlinedq import phony
from onlinedq.phony import OnlineHistDB, histogram_data_generator

ONLINE_HIST_DB = OnlineHistDB
ONLINE_GET_HISTOGRAM_OBJECT = histogram_data_generator

from onlinedq.phony import phony_trend_loader
TREND_LOADER = phony_trend_loader

# ROBO-SHIFTER
import os

RS_CONFIG_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "robo_config.json")

"""import json, pickle
with open(RS_CONFIG_PATH) as f:
    RS_CFG = json.load(f)
    RS_CLS = pickle.loads(RS_CFG['classifier_obj'].encode(), encoding='latin1')"""

# ALERTS
from onlinedq.alarms_phony import MonetAlarms
ALARMS = MonetAlarms()

SECRET_KEY = "123"

PROJECTS = [
           {"url": "prompt_dq", "name": "Prompt DQM"},
#           {"url": "offline_dq", "name": "Offline DQM"},
#           {"url": "trends", "name": "DQ Trends"},

           {"url": "online_dq", "name": "Online DQM"},
           {"url": "history_dq", "name": "History Mode"},
           {"url": "sim_dq", "name": "SimDQ"},
]

from onlinedq.partitions_phony import get_online_partitions, get_saveset_partitions
ONLINE_PARTITIONS = get_online_partitions
SAVESET_PARTITIONS = get_saveset_partitions

PROBLEM_DB_URL = 'https://its.cern.ch/jira/'
PROBLEM_DB_USERNAME = 'username'
PROBLEM_DB_KEY = 'key'
PROBLEM_DB_PROJECT_NAME = 'LBRUNPROBLEMS'

PROBLEMDB = ProblemDBClient(PROBLEM_DB_URL, PROBLEM_DB_PROJECT_NAME, PROBLEM_DB_USERNAME, PROBLEM_DB_KEY)
