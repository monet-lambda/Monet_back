
import json
from datetime import datetime

import jwt
from flask import Response, current_app, jsonify, request

from .._auth import requires_auth


class MonetAlarm:
    def __init__(
        self, histogram_id, id, text, level, is_active, system, starttime, endtime
    ):
        self.histogram_id = histogram_id
        self.id = id
        self.text = text
        self.level = level
        self.is_active = True
        self.system = system
        self.starttime = datetime.now()
        self.endtime = None

    # def insert_in_db():


ALARMS_CACHE_KEY = "alarms_cache"

# {
#   id          : "string" // will be autogenerated if omitted
#   text        : "string" // node text
#   icon        : "string" // string for custom
#   state       : {
#     opened    : boolean  // is the node open
#     disabled  : boolean  // is the node disabled
#     selected  : boolean  // is the node selected
#   },
#   children    : []  // array of strings or objects
#   li_attr     : {}  // attributes for the generated LI node
#   a_attr      : {}  // attributes for the generated A node
# }

icons = {
    "ALARM": "/static/files/mb_stop_s.png",
    "WARNING": "/static/files/mb_exclamation_s.png",
}


def create_subsystem_if_needed(alarm_subsys, subsystems):
    if alarm_subsys not in subsystems:
        subsystems[alarm_subsys] = {
            "id": "alarm-subsys-folder-" + alarm_subsys,
            "text": alarm_subsys,
            "state": {"opened": False},
            "icon": "glyphicon glyphicon-folder-close",
            "children": [],
        }


def generate_alarms_tree(alarms):
    subsystems = {}  # subsystem -> list of alarms for it
    active = {
        "id": "alarm-subsys-folder-active-alarms",
        "text": "Active alarms",
        "state": {"opened": True},
        "icon": "glyphicon glyphicon-folder-open",
        "children": [],
    }

    archive = {
        "id": "alarm-subsys-folder-active-archive",
        "text": "Archive",
        "state": {"opened": False},
        "icon": "glyphicon glyphicon-folder-close",
        "children": [],
    }

    for alarm in alarms:
        if not alarm["histogram_id"]:
            continue

        alarm_node = {
            "histo_id": alarm["histogram_id"],
            "msg_id": alarm["id"],
            "text": alarm["text"],
            "icon": icons.get(alarm["level"], ""),
        }

        if alarm["is_active"]:
            active["children"].append(alarm_node)
        else:
            create_subsystem_if_needed(alarm["system"], subsystems)
            subsystems[alarm["system"]]["children"].append(alarm_node)

    archive["children"] = list(subsystems.values())

    return {
        "text": "<strong>Alarms</strong>",
        "state": {"opened": True},
        "children": [active, archive],
    }


def get_list_of_alarms():
    alarm = {
        "histogram_id": "test",
        "id": 1,
        "text": "test of alarm",
        "level": "warning",
        "is_active": True,
        "system": "PLUME",
    }
    return [alarm]


def load_alarms_tree():
    ## Patrick Robbe : Switch off alarms for the moment
    # alarm_list = current_app.config['ALARMS'].get_list_of_alarms()
    alarm_list = get_list_of_alarms()
    return {"alarms": generate_alarms_tree(alarm_list)}


@requires_auth
def alarms_view():
    redis, cached = None, None
    if "REDIS" in current_app.config:
        redis = current_app.config["REDIS"]
    if redis:
        cached = redis.get(ALARMS_CACHE_KEY)
    if cached:
        return Response(cached, mimetype="application/json")

    ret = load_alarms_tree()
    if redis:
        redis.set(
            ALARMS_CACHE_KEY,
            json.dumps(ret),
            ex=60,
        )

    return jsonify(ret)


def alarms_new():
    try:
        token = request.headers["authorization"]
        jwt_token = token.replace("Bearer", "").strip()
        result = jwt.decode(
            jwt_token, current_app.config["AUTOMATICANALYSIS_KEY"], algorithms="RS256"
        )
        if result["origin"] != "AutomaticAnalysis":
            return jsonify(message="Not authorized"), 401
    except Exception:
        return jsonify(message="Not authorized"), 401
    print(request.json["message"])
    return jsonify(message="success")


def alarms_clear():
    try:
        token = request.headers["authorization"]
        jwt_token = token.replace("Bearer", "").strip()
        result = jwt.decode(
            jwt_token, current_app.config["AUTOMATICANALYSIS_KEY"], algorithms="RS256"
        )
        if result["origin"] != "AutomaticAnalysis":
            return jsonify(message="Not authorized"), 401
    except Exception:
        return jsonify(message="Not authorized"), 401
    return jsonify(message="success")
