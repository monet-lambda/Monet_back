"""Functions to handle color palettes"""



import bokeh.palettes
from ROOT import EColorPalette, TColor, gROOT, gStyle

from presenter.cache import cache


def get_custom_palette(name):
    dict_palettes = {
        "FTEff": [
            "#121b27",
            "#121b27",
            "#121c28",
            "#131c28",
            "#131d29",
            "#131e29",
            "#141e2a",
            "#141f2a",
            "#141f2b",
            "#15202b",
            "#15212c",
            "#15212c",
            "#16222d",
            "#16222d",
            "#16232e",
            "#17242e",
            "#17242f",
            "#18252f",
            "#182630",
            "#182630",
            "#192731",
            "#192731",
            "#192832",
            "#1a2932",
            "#1a2933",
            "#1a2a33",
            "#1b2a34",
            "#1b2b34",
            "#1b2c35",
            "#1c2c35",
            "#1c2d36",
            "#1d2e37",
            "#1d2e37",
            "#1d2f38",
            "#1e3039",
            "#1e313a",
            "#1f313a",
            "#1f323b",
            "#20333c",
            "#20343d",
            "#21353e",
            "#21353e",
            "#22363f",
            "#223740",
            "#233841",
            "#233841",
            "#243942",
            "#243a43",
            "#243b44",
            "#253c45",
            "#253c45",
            "#263d46",
            "#263e47",
            "#273f48",
            "#273f48",
            "#284049",
            "#28414a",
            "#29424b",
            "#29434c",
            "#2a434c",
            "#2a444d",
            "#2b454e",
            "#2b464f",
            "#2c4750",
            "#2c4850",
            "#2d4951",
            "#2e4a52",
            "#2f4b53",
            "#304c54",
            "#314d55",
            "#324e56",
            "#334f57",
            "#335057",
            "#345158",
            "#355259",
            "#36535a",
            "#37545b",
            "#38555c",
            "#39565d",
            "#3a585e",
            "#3a595e",
            "#3b5a5f",
            "#3c5b60",
            "#3d5c61",
            "#3e5d62",
            "#3f5e63",
            "#405f64",
            "#416065",
            "#416165",
            "#426266",
            "#436367",
            "#446468",
            "#456569",
            "#46666a",
            "#47676b",
            "#48696c",
            "#496a6c",
            "#4a6b6d",
            "#4c6c6e",
            "#4d6e6e",
            "#4e6f6f",
            "#507070",
            "#517170",
            "#537371",
            "#547472",
            "#557572",
            "#577773",
            "#587874",
            "#597974",
            "#5b7a75",
            "#5c7c76",
            "#5e7d77",
            "#5f7e77",
            "#608078",
            "#628179",
            "#638279",
            "#64837a",
            "#66857b",
            "#67867b",
            "#69877c",
            "#6a897d",
            "#6b8a7d",
            "#6d8b7e",
            "#6e8c7f",
            "#6f8e7f",
            "#718f80",
            "#729081",
            "#749282",
            "#759282",
            "#769382",
            "#779482",
            "#799582",
            "#7a9682",
            "#7b9782",
            "#7d9882",
            "#7e9982",
            "#7f9a82",
            "#819b82",
            "#829c83",
            "#839d83",
            "#859e83",
            "#869f83",
            "#87a083",
            "#89a183",
            "#8aa283",
            "#8ba383",
            "#8ca483",
            "#8ea583",
            "#8fa683",
            "#90a784",
            "#92a884",
            "#93a984",
            "#94aa84",
            "#96ab84",
            "#97ac84",
            "#98ad84",
            "#9aae84",
            "#9baf84",
            "#9cb084",
            "#9eb185",
            "#9eb184",
            "#9fb184",
            "#a0b284",
            "#a1b283",
            "#a2b283",
            "#a2b383",
            "#a3b383",
            "#a4b482",
            "#a5b482",
            "#a6b482",
            "#a6b581",
            "#a7b581",
            "#a8b581",
            "#a9b681",
            "#aab680",
            "#abb780",
            "#abb780",
            "#acb77f",
            "#adb87f",
            "#aeb87f",
            "#afb87f",
            "#afb97e",
            "#b0b97e",
            "#b1ba7e",
            "#b2ba7d",
            "#b3ba7d",
            "#b3bb7d",
            "#b4bb7d",
            "#b5bb7c",
            "#b6bc7c",
            "#b7bc7c",
            "#b8bd7c",
            "#b8bd7b",
            "#b9bd7a",
            "#babd79",
            "#bbbd79",
            "#bbbd78",
            "#bcbd77",
            "#bdbd76",
            "#bebd76",
            "#bebd75",
            "#bfbd74",
            "#c0bd73",
            "#c1bd73",
            "#c1bd72",
            "#c2bd71",
            "#c3bd70",
            "#c4bd70",
            "#c4bd6f",
            "#c5bd6e",
            "#c6bd6d",
            "#c7bd6d",
            "#c7bd6c",
            "#c8bd6b",
            "#c9bd6a",
            "#cabd6a",
            "#cabd69",
            "#cbbd68",
            "#ccbd67",
            "#cdbd67",
            "#cdbd66",
            "#cebd65",
            "#cfbd64",
            "#bcb56f",
            "#c6bd6e",
            "#cbbb6c",
            "#d0b96a",
            "#d6b668",
            "#dbb466",
            "#e0b264",
            "#dfaa65",
            "#dca267",
            "#da9969",
            "#d8906b",
            "#d6886d",
            "#d27f70",
            "#cc7675",
            "#c66d79",
            "#c0637e",
            "#ba5a83",
            "#b35388",
            "#ab558e",
            "#a25894",
            "#9a5a9a",
            "#915da0",
            "#895fa6",
            "#8266ad",
            "#7b6fb4",
            "#7477ba",
            "#6d7fc1",
            "#6687c7",
            "#5f8ccc",
            "#578ece",
            "#5090d0",
            "#4992d2",
        ]
    }
    return dict_palettes.get(name, [])


## Return array with colors of the palette
@cache.memoize(timeout=36000)
def get_root_palette(name):
    """returns a custom, ROOT or bokeh color palette"""
    if not name:
        return bokeh.palettes.viridis(256)
    # Check custom palettes
    result = get_custom_palette(name)
    if result:
        return result

    # Check ROOT paletes
    palette = getattr(EColorPalette, name, -1)
    if palette == -1:
        ## Check for bokeh palettes
        palette = getattr(bokeh.palettes, name, -1)
        if palette == -1:
            return bokeh.palettes.viridis(256)
        result = []
        if isinstance(palette, dict):
            result = max(palette.values(), key=len)
            return result
        return palette
    gStyle.SetPalette(palette)
    c_array = TColor.GetPalette()
    for i in range(c_array.GetSize()):
        col = gROOT.GetColor(c_array.At(i))
        result.append(col.AsHexString())
    return result
